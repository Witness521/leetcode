'''
给你一个由'1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。
'''
import collections
from typing import List


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        nr = len(grid)  # 行
        if nr == 0:
            return 0
        nc = len(grid[0])  # 列
        island_num = 0  # 岛屿数量
        for r in range(nr):
            for c in range(nc):
                if grid[r][c] == "1":
                    island_num += 1
                    grid[r][c] = "0"
                    # 入队
                    queue = collections.deque([(r, c)])
                    while queue:
                        (i, j) = queue.popleft()
                        grid[i][j] = "0"
                        for x, y in [(i+1, j), (i-1, j), (i, j-1), (i, j+1)]:
                            if 0 <= x < nr and 0 <= y < nc and grid[x][y] == "1":
                                queue.append((x, y))
                                grid[x][y] = "0"
                        # 将i, j这个位置的上下左右放入到队列中
                        # if i + 1 < nr and grid[i + 1][j] == "1":
                        #     queue.append((i + 1, j))
                        # if i - 1 >= 0 and grid[i - 1][j] == "1":
                        #     queue.append((i - 1, j))
                        # if j + 1 < nc and grid[i][j + 1] == "1":
                        #     queue.append((i, j + 1))
                        # if j - 1 >= 0 and grid[i][j - 1] == "1":
                        #     queue.append((i, j - 1))
        return island_num


if __name__ == '__main__':
    print(Solution().numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))






