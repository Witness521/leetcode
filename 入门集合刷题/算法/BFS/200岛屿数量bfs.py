# 使用BFS遍历岛屿的数量
import collections
from typing import List


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        rows = len(grid)
        cols = len(grid[0])
        que = collections.deque()
        count = 0
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == "1":
                    que.append((i, j))
                    grid[i][j] = "0"
                    self.bfs(grid, que, rows, cols)
                    count += 1
        return count

    def bfs(self, grid: List[List[str]], que: collections.deque, nr, nc):
        while que:
            row, col = que.popleft()
            # 上下左右
            for x, y in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:
                if 0 <= x < nr and 0 <= y < nc and grid[x][y] == "1":
                    que.append((x, y))
                    grid[x][y] = "0"

# class Solution:
#     def numIslands(self, grid: List[List[str]]) -> int:
#         rows = len(grid)
#         cols = len(grid[0])
#         count = 0
#         que = collections.deque()
#         for i in range(rows):
#             for j in range(cols):
#                 if grid[i][j] == "1":
#                     count += 1
#                     grid[i][j] = "0"
#                     que.append((i, j))
#                     while que:
#                         row, col = que.popleft()
#                         # 四个方向 上下左右
#                         for x, y in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:
#                             if 0 <= x < rows and 0 <= y < cols and grid[x][y] == "1":
#                                 que.append((x, y))
#                                 grid[x][y] = "0"
#         return count

if __name__ == '__main__':
    print(Solution().numIslands(grid = [["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]]))